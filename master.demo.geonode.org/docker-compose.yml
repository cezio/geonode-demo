version: '2.2'
services:

  db:
    image: geosolutionsit/postgis-docker:9.6
    restart: unless-stopped
    container_name: db4${COMPOSE_PROJECT_NAME}
    stdin_open: true
    # tty: true
    labels:
        org.geonode.component: db
        org.geonode.instance.name: geonode
        org.geonode.deployment.name: ${COMPOSE_PROJECT_NAME}
    #volumes:
      #- dbdata:/var/lib/postgresql/data
      #- dbbackups:/pg_backups
    env_file:
      - ./scripts/docker/env/production/db.env

  elasticsearch:
    image: elasticsearch
    restart: unless-stopped
    container_name: elasticsearch4${COMPOSE_PROJECT_NAME}
    stdin_open: true
    # tty: true
    labels:
        org.geonode.component: elasticsearch
        org.geonode.instance.name: geonode
        org.geonode.deployment.name: ${COMPOSE_PROJECT_NAME}

  rabbitmq:
    image: rabbitmq
    restart: unless-stopped
    container_name: rabbitmq4${COMPOSE_PROJECT_NAME}
    stdin_open: true
    tty: true
    labels:
        org.geonode.component: rabbitmq
        org.geonode.instance.name: geonode
        org.geonode.deployment.name: ${COMPOSE_PROJECT_NAME}

  django:
    restart: unless-stopped
    build: . 
    # image: geonode/geonode:latest
    container_name: django4${COMPOSE_PROJECT_NAME}
    stdin_open: true
    # tty: true
    labels:
        org.geonode.component: django
        org.geonode.instance.name: geonode
        org.geonode.deployment.name: ${COMPOSE_PROJECT_NAME}
    depends_on:
      - db
      - elasticsearch
      - rabbitmq
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - statics:/mnt/volumes/statics
    env_file:
      - ./scripts/docker/env/production/django.env
    environment:
      CMD: uwsgi --ini /usr/src/app/uwsgi.ini


  geoserver:
    image: geosolutionsit/geoserver-docker:2.12.x
    restart: unless-stopped
    container_name: geoserver4${COMPOSE_PROJECT_NAME}
    stdin_open: true
    # tty: true
    labels:
        org.geonode.component: geoserver
        org.geonode.instance.name: geonode
        org.geonode.deployment.name: ${COMPOSE_PROJECT_NAME}
    depends_on:
      - db
      - data-dir-conf
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - geoserver-data-dir:/geoserver_data/data
      - statics:/mnt/volumes/statics
    env_file:
      - ./scripts/docker/env/production/geoserver.env

  geonode:
    image: geosolutionsit/nginx-geonode:latest
    restart: unless-stopped
    container_name: nginx4${COMPOSE_PROJECT_NAME}
    stdin_open: true
    # tty: true
    labels:
        org.geonode.component: nginx
        org.geonode.instance.name: geonode
        org.geonode.deployment.name: ${COMPOSE_PROJECT_NAME}
    depends_on:
      - django
      - geoserver
    # set in docker-compose.override.yml
    ports:
       - "8090:80"
    volumes:
      - statics:/mnt/volumes/statics

  celery:
    restart: unless-stopped
    build: .    
    container_name: celery4${COMPOSE_PROJECT_NAME}
    stdin_open: true
    # tty: true
    labels:
        org.geonode.component: celery
        org.geonode.instance.name: geonode
        org.geonode.deployment.name: ${COMPOSE_PROJECT_NAME}
    depends_on:
      - db
      - elasticsearch
      - rabbitmq
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    env_file:
      - ./scripts/docker/env/production/celery.env
    environment:
      CMD: celery worker --app=demo_master.celeryapp:app -B -l INFO


  consumers:
    build: .
    restart: unless-stopped
    container_name: consumers4${COMPOSE_PROJECT_NAME}
    stdin_open: true
    # tty: true
    labels:
        org.geonode.component: consumers
        org.geonode.deployment.name: ${COMPOSE_PROJECT_NAME}
        org.geonode.instance.name: geonode
    depends_on:
      - rabbitmq
      - db
      - elasticsearch
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - statics:/mnt/volumes/statics
    env_file:
      - ./scripts/docker/env/production/django.env
    environment:
      CMD: python manage.py runmessaging
      # we set this to avoid duplicate migration applying
      IS_CELERY: 'true'
    

  data-dir-conf:
    image: geosolutionsit/geoserver_data:2.12.x
    restart: on-failure
    container_name: gsconf4${COMPOSE_PROJECT_NAME}
    labels:
        org.geonode.component: conf
        org.geonode.instance.name: geonode
        org.geonode.deployment.name: ${COMPOSE_PROJECT_NAME}
    command: /bin/true
    volumes:
      - geoserver-data-dir:/geoserver_data/data

  backup:
    build: scripts/docker/backup/
    restart: unless-stopped
    container_name: backup4${COMPOSE_PROJECT_NAME}
    stdin_open: true
    command: /usr/sbin/cron -f
    labels:
        org.geonode.component: backup
        org.geonode.instance.name: geonode
        org.geonode.deployment.name: ${COMPOSE_PROJECT_NAME}
    env_file:
      - ./scripts/docker/env/production/django.env
    depends_on:
      - rabbitmq
      - elasticsearch
      - django
      - db
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - dbbackups:/mnt/volumes/backups/
      - statics:/mnt/volumes/statics/
      #- dbdata:/mnt/volumes/pgdata/
      - geoserver-data-dir:/geoserver_data/data

volumes:

  geoserver-data-dir:
    name: ${COMPOSE_PROJECT_NAME}-gsdatadir
  #dbdata:
  #  name: ${COMPOSE_PROJECT_NAME}-dbdata
  dbbackups:
    name: ${COMPOSE_PROJECT_NAME}-dbbackups
  statics:
    name: ${COMPOSE_PROJECT_NAME}-statics
